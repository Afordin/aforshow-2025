---
import Layout from "@/layouts/Layout.astro";
import Link from "@/components/common/Link.astro";
import Button from "@/components/common/Button.astro";
import Footer from "@/components/Footer.astro";
---

<Layout>
  <main class="w-full max-w-4xl mx-auto flex flex-col gap-16 py-16">
    <header class="w-full flex items-center justify-between">
      <h1 class="font-handlee text-3xl">Aforshow 2025</h1>
      <Link href="https://discord.com/invite/comuafor" variant="primary"
        >Únete a la comunidad</Link
      >
    </header>
    <section class="w-full justify-center text-center flex flex-col gap-4">
      <h1 class="font-handlee text-6xl">Sorteo pack afordin</h1>
      <p>
        Escribe <strong>!piticlin</strong> en el chat para entrar en el sorteo
      </p>
      <div class="w-full grid grid-cols-3 gap-4">
        <label
          for="cap"
          class="bg-slate-50 has-checked:outline-2 rounded-lg has-checked:outline-cs-primary flex h-full flex-col items-center justify-center gap-2 w-full py-4"
        >
          <img
            src="/imgs/cap.webp"
            aria-hidden="true"
            loading="lazy"
            decoding="async"
            alt="Gorra Afordin"
            width="78"
            height="78"
          />
          <input
            type="radio"
            class="hidden"
            id="cap"
            name="radio"
            value="cap"
            checked
          />
          <p>Gorra Afordin</p>
        </label>

        <label
          for="shirt"
          class="bg-slate-50 has-checked:outline-2 rounded-lg has-checked:outline-cs-primary flex h-full flex-col items-center justify-center gap-2 w-full py-4"
        >
          <img
            src="/imgs/shirt.webp"
            aria-hidden="true"
            loading="lazy"
            decoding="async"
            alt="Gorra Afordin"
            width="78"
            height="78"
          />
          <input
            type="radio"
            class="hidden"
            id="shirt"
            name="radio"
            value="shirt"
          />
          <p>Camiseta Afordin</p>
        </label>

        <label
          for="pack"
          class="bg-slate-50 has-checked:outline-2 rounded-lg has-checked:outline-cs-primary flex h-full flex-col items-center justify-center gap-2 w-full py-4"
        >
          <img
            src="/imgs/pack-afordin.webp"
            aria-hidden="true"
            loading="lazy"
            decoding="async"
            alt="Gorra Afordin"
            width="78"
            height="78"
          />
          <input
            type="radio"
            class="hidden"
            id="pack"
            name="radio"
            value="pack"
          />
          <p>Pack Gorra + Camiseta Afordin</p>
        </label>
      </div>
    </section>

    <section class="grid grid-cols-2 min-h-[520px] h-[520px] gap-4 w-full">
      <article
        class="h-full rounded-lg bg-cs-background flex flex-col gap-6 items-center py-8"
      >
        <h1 class="font-bold text-xl">Participantes</h1>
        <ul class="gonzaloEsMiPastor flex flex-col items-center gap-4"></ul>
      </article>
      <article class="h-full flex flex-col gap-6 items-center justify-center">
        <div class="flex flex-col items-center gap-4">
          <p class="timer leading-16 font-black text-[110px]">30</p>
          <p class="text-4xl font-handlee">segundos</p>
        </div>
        <div class="flex gap-2">
          <Button id="initTimer">¡Iniciar!</Button>
          <Button id="stopTimer">¡Parar!</Button>
          <Button id="resetTimer">¡Resetear!</Button>
        </div>
      </article>
    </section>

    <section class="grid grid-cols-3 gap-2.5 w-full">
      <article
        class="flex flex-col gap-4 rounded-lg bg-cs-background px-4 py-8 items-center justify-center"
      >
        <p class="font-semibold leading-5 text-4xl">x2</p>
        <p class="font-handlee text-2xl">suscriptores tier 1</p>
      </article>
      <article
        class="flex flex-col gap-4 rounded-lg bg-cs-background px-4 py-8 items-center justify-center"
      >
        <p class="font-semibold leading-5 text-4xl">x3</p>
        <p class="font-handlee text-2xl">suscriptores tier 2</p>
      </article>
      <article
        class="flex flex-col gap-4 rounded-lg bg-cs-background px-4 py-8 items-center justify-center"
      >
        <p class="font-semibold leading-5 text-4xl">x4</p>
        <p class="font-handlee text-2xl">suscriptores tier 3</p>
      </article>
    </section>
  </main>
</Layout>
<Footer />

<script>
  import { client } from "mtmi";

  client.connect({ channels: ["afor_digital"] });

  const users: string[] = [];
  const listUsers = document.querySelector(".gonzaloEsMiPastor");

  client.on(
    "message",
    ({ username, message }: { username: string; message: string }) => {
      if (
        message.trim().toLowerCase() == "!piticlin" &&
        !users.includes(username)
      ) {
        users.push(username);

        const newUser = document.createElement("li");
        newUser.textContent = `${username}`;
        listUsers?.appendChild(newUser);
      }
    }
  );

  type SubPlanType = {
    planName: string;
    plan: string;
    isPrime: boolean;
    isTier1: boolean;
    isTier2: boolean;
    isTier3: boolean;
  };

  type GiftInfoType = {
    giftMonths: number;
    months: number;
    originId: string;
    isAnonymous: boolean;
    gifterUserName: string;
    gifterDisplayName: string;
    recipientDisplayName: string;
    recipientId: number;
    recipientUserName: string;
    subPlan: SubPlanType;
    systemMsg: string;
    senderCount?: number;
    funString?: string;
    goalInfo?: GoalGroupType;
  };

  interface MysteryGiftInfoType {
    massGiftCount: number;
    originId: string;
    isAnonymous: boolean;
    senderUsername: string;
    subPlan: string;
    systemMsg: string;
    senderCount?: number;
  }

  // client.on("subgift", (data: GiftInfoType) => {
  //   const { gifterUserName, senderCount } = data;
  //   console.log("gifterUserName", gifterUserName);
  //   console.log("senderCount", senderCount);
  // });

  const handleSubscription = (data: GiftInfoType | MysteryGiftInfoType) => {};

  client.on("subgift", handleSubscription);
  client.on("submysterygift", handleSubscription);

  // client.on(
  //   "submysterygift",
  //   ({
  //     gifterUserName,
  //     senderCount,
  //   }: {
  //     gifterUserName: string;
  //     senderCount: number;
  //   }) => {
  //     console.log("gifterUserName", gifterUserName);
  //     console.log("senderCount", senderCount);
  //   }
  // );
</script>

<script>
  const TIMER_SECONDS = 30;
  let counter = TIMER_SECONDS;
  const $timer = document.querySelector(".timer");

  const $stopTimer = document.querySelector("#stopTimer") as HTMLElement;
  const $initTimer = document.querySelector("#initTimer") as HTMLElement;

  $stopTimer.style.display = "none";

  $initTimer?.addEventListener("click", () => {
    startTimer();
  });

  $stopTimer?.addEventListener("click", () => {
    stopTimer();
  });

  let interval: ReturnType<typeof setInterval>;

  const startTimer = () => {
    $initTimer.style.display = "none";
    $stopTimer.style.display = "flex";

    interval = setInterval(() => {
      counter--;

      if (!$timer) return;
      $timer.textContent = counter.toString();

      if (counter <= 0) {
        clearInterval(interval);
      }
    }, 1000);
  };

  const stopTimer = () => {
    $stopTimer.style.display = "none";
    $initTimer.style.display = "flex";
    clearInterval(interval);
  };

  document.querySelector("#resetTimer")?.addEventListener("click", () => {
    resetTimer();
  });

  const resetTimer = () => {
    clearInterval(interval);
    counter = TIMER_SECONDS;

    if (!$timer) return;
    $timer.textContent = counter.toString();
  };
</script>
